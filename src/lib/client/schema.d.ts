/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

interface components {
	schemas: {
		/** Server Configuration */
		RevoltConfig: {
			/** @description Revolt API Version */
			revolt: string;
			/** @description Features enabled on this Revolt node */
			features: components['schemas']['RevoltFeatures'];
			/** @description WebSocket URL */
			ws: string;
			/** @description URL pointing to the client serving this node */
			app: string;
			/** @description Web Push VAPID public key */
			vapid: string;
			/** @description Build information */
			build: components['schemas']['BuildInformation'];
		};
		/** Feature Configuration */
		RevoltFeatures: {
			/** @description hCaptcha configuration */
			captcha: components['schemas']['CaptchaFeature'];
			/** @description Whether email verification is enabled */
			email: boolean;
			/** @description Whether this server is invite only */
			invite_only: boolean;
			/** @description File server service configuration */
			autumn: components['schemas']['Feature'];
			/** @description Proxy service configuration */
			january: components['schemas']['Feature'];
			/** @description Voice server configuration */
			voso: components['schemas']['VoiceFeature'];
		};
		/** hCaptcha Configuration */
		CaptchaFeature: {
			/** @description Whether captcha is enabled */
			enabled: boolean;
			/** @description Client key used for solving captcha */
			key: string;
		};
		/** Generic Service Configuration */
		Feature: {
			/** @description Whether the service is enabled */
			enabled: boolean;
			/** @description URL pointing to the service */
			url: string;
		};
		/** Voice Server Configuration */
		VoiceFeature: {
			/** @description Whether voice is enabled */
			enabled: boolean;
			/** @description URL pointing to the voice API */
			url: string;
			/** @description URL pointing to the voice WebSocket server */
			ws: string;
		};
		/** Build Information */
		BuildInformation: {
			/** @description Commit Hash */
			commit_sha: string;
			/** @description Commit Timestamp */
			commit_timestamp: string;
			/** @description Git Semver */
			semver: string;
			/** @description Git Origin URL */
			origin_url: string;
			/** @description Build Timestamp */
			timestamp: string;
		};
		/**
		 * @description Permission value on Revolt
		 *
		 * This should be restricted to the lower 52 bits to prevent any potential issues with Javascript. Also leave empty spaces for future permission flags to be added.
		 * @enum {string}
		 */
		Permission:
			| 'ManageChannel'
			| 'ManageServer'
			| 'ManagePermissions'
			| 'ManageRole'
			| 'ManageCustomisation'
			| 'KickMembers'
			| 'BanMembers'
			| 'TimeoutMembers'
			| 'AssignRoles'
			| 'ChangeNickname'
			| 'ManageNicknames'
			| 'ChangeAvatar'
			| 'RemoveAvatars'
			| 'ViewChannel'
			| 'ReadMessageHistory'
			| 'SendMessage'
			| 'ManageMessages'
			| 'ManageWebhooks'
			| 'InviteOthers'
			| 'SendEmbeds'
			| 'UploadFiles'
			| 'Masquerade'
			| 'React'
			| 'Connect'
			| 'Speak'
			| 'Video'
			| 'MuteMembers'
			| 'DeafenMembers'
			| 'MoveMembers'
			| 'GrantAllSafe'
			| 'GrantAll';
		/**
		 * @description User permission definitions
		 * @enum {string}
		 */
		UserPermission: 'Access' | 'ViewProfile' | 'SendMessage' | 'Invite';
		/**
		 * Error
		 * @description Possible API Errors
		 */
		Error:
			| {
					/** @enum {string} */
					type: 'LabelMe';
			  }
			| ({
					/** @enum {string} */
					type: 'Core';
					/** @description Where this error occurred */
					location: string;
			  } & (
					| {
							/** @enum {string} */
							type: 'LabelMe';
					  }
					| {
							/** @enum {string} */
							type: 'AlreadyOnboarded';
					  }
					| {
							/** @enum {string} */
							type: 'UsernameTaken';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidUsername';
					  }
					| {
							/** @enum {string} */
							type: 'UnknownUser';
					  }
					| {
							/** @enum {string} */
							type: 'AlreadyFriends';
					  }
					| {
							/** @enum {string} */
							type: 'AlreadySentRequest';
					  }
					| {
							/** @enum {string} */
							type: 'Blocked';
					  }
					| {
							/** @enum {string} */
							type: 'BlockedByOther';
					  }
					| {
							/** @enum {string} */
							type: 'NotFriends';
					  }
					| {
							/** @enum {string} */
							type: 'UnknownChannel';
					  }
					| {
							/** @enum {string} */
							type: 'UnknownAttachment';
					  }
					| {
							/** @enum {string} */
							type: 'UnknownMessage';
					  }
					| {
							/** @enum {string} */
							type: 'CannotEditMessage';
					  }
					| {
							/** @enum {string} */
							type: 'CannotJoinCall';
					  }
					| {
							/** @enum {string} */
							type: 'TooManyAttachments';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'TooManyReplies';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'TooManyChannels';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'EmptyMessage';
					  }
					| {
							/** @enum {string} */
							type: 'PayloadTooLarge';
					  }
					| {
							/** @enum {string} */
							type: 'CannotRemoveYourself';
					  }
					| {
							/** @enum {string} */
							type: 'GroupTooLarge';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'AlreadyInGroup';
					  }
					| {
							/** @enum {string} */
							type: 'NotInGroup';
					  }
					| {
							/** @enum {string} */
							type: 'UnknownServer';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidRole';
					  }
					| {
							/** @enum {string} */
							type: 'Banned';
					  }
					| {
							/** @enum {string} */
							type: 'TooManyServers';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'TooManyEmoji';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'TooManyRoles';
							/** Format: uint */
							max: number;
					  }
					| {
							/** @enum {string} */
							type: 'ReachedMaximumBots';
					  }
					| {
							/** @enum {string} */
							type: 'IsBot';
					  }
					| {
							/** @enum {string} */
							type: 'BotIsPrivate';
					  }
					| {
							/** @enum {string} */
							type: 'CannotReportYourself';
					  }
					| {
							/** @enum {string} */
							type: 'MissingPermission';
							permission: string;
					  }
					| {
							/** @enum {string} */
							type: 'MissingUserPermission';
							permission: string;
					  }
					| {
							/** @enum {string} */
							type: 'NotElevated';
					  }
					| {
							/** @enum {string} */
							type: 'NotPrivileged';
					  }
					| {
							/** @enum {string} */
							type: 'CannotGiveMissingPermissions';
					  }
					| {
							/** @enum {string} */
							type: 'NotOwner';
					  }
					| {
							/** @enum {string} */
							type: 'DatabaseError';
							operation: string;
							collection: string;
					  }
					| {
							/** @enum {string} */
							type: 'InternalError';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidOperation';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidCredentials';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidProperty';
					  }
					| {
							/** @enum {string} */
							type: 'InvalidSession';
					  }
					| {
							/** @enum {string} */
							type: 'DuplicateNonce';
					  }
					| {
							/** @enum {string} */
							type: 'NotFound';
					  }
					| {
							/** @enum {string} */
							type: 'NoEffect';
					  }
					| {
							/** @enum {string} */
							type: 'FailedValidation';
							error: string;
					  }
					| {
							/** @enum {string} */
							type: 'VosoUnavailable';
					  }
			  ))
			| {
					/** @enum {string} */
					type: 'AlreadyOnboarded';
			  }
			| {
					/** @enum {string} */
					type: 'UsernameTaken';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidUsername';
			  }
			| {
					/** @enum {string} */
					type: 'DiscriminatorChangeRatelimited';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownUser';
			  }
			| {
					/** @enum {string} */
					type: 'AlreadyFriends';
			  }
			| {
					/** @enum {string} */
					type: 'AlreadySentRequest';
			  }
			| {
					/** @enum {string} */
					type: 'Blocked';
			  }
			| {
					/** @enum {string} */
					type: 'BlockedByOther';
			  }
			| {
					/** @enum {string} */
					type: 'NotFriends';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownChannel';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownAttachment';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownMessage';
			  }
			| {
					/** @enum {string} */
					type: 'CannotEditMessage';
			  }
			| {
					/** @enum {string} */
					type: 'CannotJoinCall';
			  }
			| {
					/** @enum {string} */
					type: 'TooManyAttachments';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'TooManyReplies';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'TooManyChannels';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'TooManyEmbeds';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'EmptyMessage';
			  }
			| {
					/** @enum {string} */
					type: 'PayloadTooLarge';
			  }
			| {
					/** @enum {string} */
					type: 'CannotRemoveYourself';
			  }
			| {
					/** @enum {string} */
					type: 'GroupTooLarge';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'AlreadyInGroup';
			  }
			| {
					/** @enum {string} */
					type: 'NotInGroup';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownServer';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidRole';
			  }
			| {
					/** @enum {string} */
					type: 'Banned';
			  }
			| {
					/** @enum {string} */
					type: 'TooManyServers';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'TooManyEmoji';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'TooManyRoles';
					/** Format: uint */
					max: number;
			  }
			| {
					/** @enum {string} */
					type: 'ReachedMaximumBots';
			  }
			| {
					/** @enum {string} */
					type: 'IsBot';
			  }
			| {
					/** @enum {string} */
					type: 'BotIsPrivate';
			  }
			| {
					/** @enum {string} */
					type: 'CannotReportYourself';
			  }
			| {
					/** @enum {string} */
					type: 'MissingPermission';
					permission: components['schemas']['Permission'];
			  }
			| {
					/** @enum {string} */
					type: 'MissingUserPermission';
					permission: components['schemas']['UserPermission'];
			  }
			| {
					/** @enum {string} */
					type: 'NotElevated';
			  }
			| {
					/** @enum {string} */
					type: 'NotPrivileged';
			  }
			| {
					/** @enum {string} */
					type: 'CannotGiveMissingPermissions';
			  }
			| {
					/** @enum {string} */
					type: 'NotOwner';
			  }
			| {
					/** @enum {string} */
					type: 'DatabaseError';
					operation: string;
					with: string;
			  }
			| {
					/** @enum {string} */
					type: 'InternalError';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidOperation';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidCredentials';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidProperty';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidSession';
			  }
			| {
					/** @enum {string} */
					type: 'DuplicateNonce';
			  }
			| {
					/** @enum {string} */
					type: 'VosoUnavailable';
			  }
			| {
					/** @enum {string} */
					type: 'NotFound';
			  }
			| {
					/** @enum {string} */
					type: 'NoEffect';
			  }
			| {
					/** @enum {string} */
					type: 'FailedValidation';
			  };
		/** @description Server Stats */
		Stats: {
			/** @description Index usage information */
			indices: {
				[key: string]: components['schemas']['Index'][];
			};
			/** @description Collection stats */
			coll_stats: {
				[key: string]: components['schemas']['CollectionStats'];
			};
		};
		/** @description Collection index */
		Index: {
			/** @description Index name */
			name: string;
			/** @description Access information */
			accesses: components['schemas']['IndexAccess'];
		};
		/** @description Index access information */
		IndexAccess: {
			/**
			 * Format: int32
			 * @description Operations since timestamp
			 */
			ops: number;
			/** @description Timestamp at which data keeping begun */
			since: components['schemas']['ISO8601 Timestamp'];
		};
		/**
		 * Format: date-time
		 * @description ISO8601 formatted timestamp
		 * @example 1970-01-01T00:00:00Z
		 */
		'ISO8601 Timestamp': string;
		/** @description Collection stats */
		CollectionStats: {
			/** @description Namespace */
			ns: string;
			/** @description Local time */
			localTime: components['schemas']['ISO8601 Timestamp'];
			/** @description Latency stats */
			latencyStats: {
				[key: string]: components['schemas']['LatencyStats'];
			};
			/** @description Query exec stats */
			queryExecStats: components['schemas']['QueryExecStats'];
			/**
			 * Format: uint64
			 * @description Number of documents in collection
			 */
			count: number;
		};
		/** @description Collection latency stats */
		LatencyStats: {
			/**
			 * Format: int64
			 * @description Total operations
			 */
			ops: number;
			/**
			 * Format: int64
			 * @description Timestamp at which data keeping begun
			 */
			latency: number;
			/** @description Histogram representation of latency data */
			histogram: components['schemas']['LatencyHistogramEntry'][];
		};
		/** @description Histogram entry */
		LatencyHistogramEntry: {
			/**
			 * Format: int64
			 * @description Time
			 */
			micros: number;
			/**
			 * Format: int64
			 * @description Count
			 */
			count: number;
		};
		/** @description Collection query execution stats */
		QueryExecStats: {
			/** @description Stats regarding collection scans */
			collectionScans: components['schemas']['CollectionScans'];
		};
		/** @description Query collection scan stats */
		CollectionScans: {
			/**
			 * Format: int64
			 * @description Number of total collection scans
			 */
			total: number;
			/**
			 * Format: int64
			 * @description Number of total collection scans not using a tailable cursor
			 */
			nonTailable: number;
		};
		/** @description Representiation of a User on Revolt. */
		User: {
			/** @description Unique Id */
			_id: string;
			/** @description Username */
			username: string;
			/** @description Discriminator */
			discriminator: string;
			/** @description Display name */
			display_name?: string;
			/** @description Avatar attachment */
			avatar?: components['schemas']['AutumnFile'];
			/** @description Relationships with other users */
			relations?: components['schemas']['Relationship'][];
			/**
			 * Format: int32
			 * @description Bitfield of user badges
			 */
			badges?: number;
			/** @description User's current status */
			status?: components['schemas']['UserStatus'];
			/** @description User's profile page */
			profile?: components['schemas']['UserProfile'];
			/**
			 * Format: int32
			 * @description Enum of user flags
			 */
			flags?: number;
			/** @description Whether this user is privileged */
			privileged?: boolean;
			/** @description Bot information */
			bot?: components['schemas']['BotInformation'];
			/** @description Current session user's relationship with this user */
			relationship?: components['schemas']['RelationshipStatus'];
			/** @description Whether this user is currently online */
			online?: boolean;
		};
		/** @description Representation of a File on Revolt Generated by Autumn */
		AutumnFile: {
			/** @description Unique Id */
			_id: string;
			/** @description Tag / bucket this file was uploaded to */
			tag: string;
			/** @description Original filename */
			filename: string;
			/** @description Parsed metadata of this file */
			metadata: components['schemas']['Metadata'];
			/** @description Raw content type of this file */
			content_type: string;
			/**
			 * Format: int
			 * @description Size of this file (in bytes)
			 */
			size: number;
			/** @description Whether this file was deleted */
			deleted?: boolean;
			/** @description Whether this file was reported */
			reported?: boolean;
			message_id?: string;
			user_id?: string;
			server_id?: string;
			/** @description Id of the object this file is associated with */
			object_id?: string;
		};
		/** @description Metadata associated with file */
		Metadata:
			| {
					/** @enum {string} */
					type: 'File';
			  }
			| {
					/** @enum {string} */
					type: 'Text';
			  }
			| {
					/** @enum {string} */
					type: 'Image';
					/** Format: int */
					width: number;
					/** Format: int */
					height: number;
			  }
			| {
					/** @enum {string} */
					type: 'Video';
					/** Format: int */
					width: number;
					/** Format: int */
					height: number;
			  }
			| {
					/** @enum {string} */
					type: 'Audio';
			  };

		/** @description Relationship entry indicating current status with other user */
		Relationship: {
			_id: string;
			status: components['schemas']['RelationshipStatus'];
		};
		/**
		 * @description User's relationship with another user (or themselves)
		 * @enum {string}
		 */
		RelationshipStatus:
			| 'None'
			| 'User'
			| 'Friend'
			| 'Outgoing'
			| 'Incoming'
			| 'Blocked'
			| 'BlockedOther';
		/** @description User's active status */
		UserStatus: {
			/** @description Custom status text */
			text?: string;
			/** @description Current presence option */
			presence?: components['schemas']['Presence'];
		};
		/**
		 * @description Presence status
		 * @enum {string}
		 */
		Presence: 'Online' | 'Idle' | 'Focus' | 'Busy' | 'Invisible';
		/** @description User's profile */
		UserProfile: {
			/** @description Text content on user's profile */
			content?: string;
			/** @description Background visible on user's profile */
			background?: components['schemas']['AutumnFile'];
		};
		/** @description Bot information for if the user is a bot */
		BotInformation: {
			/** @description Id of the owner of this bot */
			owner: string;
		};
		Id: string;
		/** Flag Response */
		FlagResponse: {
			/**
			 * Format: int32
			 * @description Flags
			 */
			flags: number;
		};
		/** User Data */
		DataEditUser: {
			/** @description New display name */
			display_name?: string;
			/** @description Attachment Id for avatar */
			avatar?: string;
			/** @description New user status */
			status?: components['schemas']['UserStatus'];
			/**
			 * @description New user profile data
			 *
			 * This is applied as a partial.
			 */
			profile?: components['schemas']['UserProfileData'];
			/**
			 * Format: int32
			 * @description Bitfield of user badges
			 */
			badges?: number;
			/**
			 * Format: int32
			 * @description Enum of user flags
			 */
			flags?: number;
			/** @description Fields to remove from user object */
			remove?: components['schemas']['FieldsUser'][];
		};
		/** Profile Data */
		UserProfileData: {
			/** @description Text to set as user profile description */
			content?: string;
			/** @description Attachment Id for background */
			background?: string;
		};
		/**
		 * @description Optional fields on user object
		 * @enum {string}
		 */
		FieldsUser:
			| 'Avatar'
			| 'StatusText'
			| 'StatusPresence'
			| 'ProfileContent'
			| 'ProfileBackground'
			| 'DisplayName';
		/** Username Information */
		DataChangeUsername: {
			/** @description New username */
			username: string;
			/** @description Current account password */
			password: string;
		};
		/** @description Representation of a channel on Revolt */
		Channel:
			| {
					/** @enum {string} */
					channel_type: 'SavedMessages';
					/** @description Unique Id */
					_id: string;
					/** @description Id of the user this channel belongs to */
					user: string;
			  }
			| {
					/** @enum {string} */
					channel_type: 'DirectMessage';
					/** @description Unique Id */
					_id: string;
					/** @description Whether this direct message channel is currently open on both sides */
					active: boolean;
					/** @description 2-tuple of user ids participating in direct message */
					recipients: [string, string];
					/** @description Id of the last message sent in this channel */
					last_message_id?: string;
			  }
			| {
					/** @enum {string} */
					channel_type: 'Group';
					/** @description Unique Id */
					_id: string;
					/** @description Display name of the channel */
					name: string;
					/** @description User id of the owner of the group */
					owner: string;
					/** @description Channel description */
					description?: string;
					/** @description Array of user ids participating in channel */
					recipients: string[];
					/** @description Custom icon attachment */
					icon?: components['schemas']['AutumnFile'];
					/** @description Id of the last message sent in this channel */
					last_message_id?: string;
					/**
					 * Format: int64
					 * @description Permissions assigned to members of this group (does not apply to the owner of the group)
					 */
					permissions?: number;
					/** @description Whether this group is marked as not safe for work */
					nsfw?: boolean;
			  }
			| {
					/** @enum {string} */
					channel_type: 'TextChannel';
					/** @description Unique Id */
					_id: string;
					/** @description Id of the server this channel belongs to */
					server: string;
					/** @description Display name of the channel */
					name: string;
					/** @description Channel description */
					description?: string;
					/** @description Custom icon attachment */
					icon?: components['schemas']['AutumnFile'];
					/** @description Id of the last message sent in this channel */
					last_message_id?: string;
					/** @description Default permissions assigned to users in this channel */
					default_permissions?: components['schemas']['OverrideField'];
					/** @description Permissions assigned based on role to this channel */
					role_permissions?: {
						[key: string]: components['schemas']['OverrideField'];
					};
					/** @description Whether this channel is marked as not safe for work */
					nsfw?: boolean;
			  }
			| {
					/** @enum {string} */
					channel_type: 'VoiceChannel';
					/** @description Unique Id */
					_id: string;
					/** @description Id of the server this channel belongs to */
					server: string;
					/** @description Display name of the channel */
					name: string;
					/** @description Channel description */
					description?: string;
					/** @description Custom icon attachment */
					icon?: components['schemas']['AutumnFile'];
					/** @description Default permissions assigned to users in this channel */
					default_permissions?: components['schemas']['OverrideField'];
					/** @description Permissions assigned based on role to this channel */
					role_permissions?: {
						[key: string]: components['schemas']['OverrideField'];
					};
					/** @description Whether this channel is marked as not safe for work */
					nsfw?: boolean;
			  };
		/** @description Representation of a single permission override as it appears on models and in the database */
		OverrideField: {
			/**
			 * Format: int64
			 * @description Allow bit flags
			 */
			a: number;
			/**
			 * Format: int64
			 * @description Disallow bit flags
			 */
			d: number;
		};
		/** Mutual Friends and Servers Response */
		MutualResponse: {
			/** @description Array of mutual user IDs that both users are friends with */
			users: string[];
			/** @description Array of mutual server IDs that both users are in */
			servers: string[];
		};
		/** User Lookup Information */
		DataSendFriendRequest: {
			/** @description Username and discriminator combo separated by # */
			username: string;
		};
		/** @description Representation of a bot on Revolt */
		Bot: {
			/**
			 * @description Bot Id
			 *
			 * This equals the associated bot user's id.
			 */
			_id: string;
			/** @description User Id of the bot owner */
			owner: string;
			/** @description Token used to authenticate requests for this bot */
			token: string;
			/** @description Whether the bot is public (may be invited by anyone) */
			public: boolean;
			/** @description Whether to enable analytics */
			analytics?: boolean;
			/** @description Whether this bot should be publicly discoverable */
			discoverable?: boolean;
			/** @description Reserved; URL for handling interactions */
			interactions_url?: string;
			/** @description URL for terms of service */
			terms_of_service_url?: string;
			/** @description URL for privacy policy */
			privacy_policy_url?: string;
			/**
			 * Format: int32
			 * @description Enum of bot flags
			 */
			flags?: number;
		};
		/** Bot Details */
		DataCreateBot: {
			/** @description Bot username */
			name: string;
		};
		/** Invite Destination */
		InviteBotDestination:
			| {
					/** @description Server Id */
					server: string;
			  }
			| {
					/** @description Group Id */
					group: string;
			  };
		/** @description Public Bot */
		PublicBot: {
			/** @description Bot Id */
			_id: string;
			/** @description Bot Username */
			username: string;
			/** @description Profile Avatar */
			avatar: string;
			/** @description Profile Description */
			description: string;
		};
		/** @description Bot Response */
		FetchBotResponse: {
			/** @description Bot object */
			bot: components['schemas']['Bot'];
			/** @description User object */
			user: components['schemas']['User'];
		};
		/**
		 * Owned Bots Response
		 * @description Both lists are sorted by their IDs.
		 */
		OwnedBotsResponse: {
			/** @description Bot objects */
			bots: components['schemas']['Bot'][];
			/** @description User objects */
			users: components['schemas']['User'][];
		};
		/** Bot Details */
		DataEditBot: {
			/** @description Bot username */
			name?: string;
			/** @description Whether the bot can be added by anyone */
			public?: boolean;
			/**
			 * @description Whether analytics should be gathered for this bot
			 *
			 * Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg).
			 */
			analytics?: boolean;
			/** @description Interactions URL */
			interactions_url?: string;
			/** @description Fields to remove from bot object */
			remove?: components['schemas']['FieldsBot'][];
		};
		/**
		 * @description Optional fields on bot object
		 * @enum {string}
		 */
		FieldsBot: 'Token' | 'InteractionsURL';
		/** Channel Details */
		DataEditChannel: {
			/** @description Channel name */
			name?: string;
			/** @description Channel description */
			description?: string;
			/** @description Group owner */
			owner?: string;
			/**
			 * @description Icon
			 *
			 * Provide an Autumn attachment Id.
			 */
			icon?: string;
			/** @description Whether this channel is age-restricted */
			nsfw?: boolean;
			/** @description Whether this channel is archived */
			archived?: boolean;
			remove?: components['schemas']['FieldsChannel'][];
		};
		/**
		 * @description Optional fields on channel object
		 * @enum {string}
		 */
		FieldsChannel: 'Description' | 'Icon' | 'DefaultPermissions';
		/** @description Representation of an invite to a channel on Revolt */
		Invite:
			| {
					/** @enum {string} */
					type: 'Server';
					/** @description Invite code */
					_id: string;
					/** @description Id of the server this invite points to */
					server: string;
					/** @description Id of user who created this invite */
					creator: string;
					/** @description Id of the server channel this invite points to */
					channel: string;
			  }
			| {
					/** @enum {string} */
					type: 'Group';
					/** @description Invite code */
					_id: string;
					/** @description Id of user who created this invite */
					creator: string;
					/** @description Id of the group channel this invite points to */
					channel: string;
			  };
		/** @description Representation of a Message on Revolt */
		Message: {
			/** @description Unique Id */
			_id: string;
			/** @description Unique value generated by client sending this message */
			nonce?: string;
			/** @description Id of the channel this message was sent in */
			channel: string;
			/** @description Id of the user or webhook that sent this message */
			author: string;
			/** @description The webhook that sent this message */
			webhook?: components['schemas']['MessageWebhook'];
			/** @description Message content */
			content?: string;
			/** @description System message */
			system?: components['schemas']['SystemMessage'];
			/** @description Array of attachments */
			attachments?: components['schemas']['AutumnFile'][];
			/** @description Time at which this message was last edited */
			edited?: components['schemas']['ISO8601 Timestamp'];
			/** @description Attached embeds to this message */
			embeds?: components['schemas']['Embed'][];
			/** @description Array of user ids mentioned in this message */
			mentions?: string[];
			/** @description Array of message ids this message is replying to */
			replies?: string[];
			/** @description Hashmap of emoji IDs to array of user IDs */
			reactions?: {
				[key: string]: string[];
			};
			/** @description Information about how this message should be interacted with */
			interactions?: components['schemas']['Interactions'];
			/** @description Name and / or avatar overrides for this message */
			masquerade?: components['schemas']['Masquerade'];
		};
		/** @description Information about the webhook bundled with Message */
		MessageWebhook: {
			name: string;
			avatar?: string;
		};
		/** @description Representation of a system event message */
		SystemMessage:
			| {
					/** @enum {string} */
					type: 'text';
					content: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_added';
					id: string;
					by: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_remove';
					id: string;
					by: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_joined';
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_left';
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_kicked';
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'user_banned';
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'channel_renamed';
					name: string;
					by: string;
			  }
			| {
					/** @enum {string} */
					type: 'channel_description_changed';
					by: string;
			  }
			| {
					/** @enum {string} */
					type: 'channel_icon_changed';
					by: string;
			  }
			| {
					/** @enum {string} */
					type: 'channel_ownership_changed';
					from: string;
					to: string;
			  };
		/** @description Embed */
		Embed:
			| {
					/** @enum {string} */
					type: 'Website';
					/** @description Direct URL to web page */
					url?: string;
					/** @description Original direct URL */
					original_url?: string;
					/** @description Remote content */
					special?: components['schemas']['Special'];
					/** @description Title of website */
					title?: string;
					/** @description Description of website */
					description?: string;
					/** @description Embedded image */
					image?: components['schemas']['Image'];
					/** @description Embedded video */
					video?: components['schemas']['Video'];
					/** @description Site name */
					site_name?: string;
					/** @description URL to site icon */
					icon_url?: string;
					/** @description CSS Colour */
					colour?: string;
			  }
			| {
					/** @enum {string} */
					type: 'Image';
					/** @description URL to the original image */
					url: string;
					/**
					 * Format: int
					 * @description Width of the image
					 */
					width: number;
					/**
					 * Format: int
					 * @description Height of the image
					 */
					height: number;
					/** @description Positioning and size */
					size: components['schemas']['ImageSize'];
			  }
			| {
					/** @enum {string} */
					type: 'Video';
					/** @description URL to the original video */
					url: string;
					/**
					 * Format: int
					 * @description Width of the video
					 */
					width: number;
					/**
					 * Format: int
					 * @description Height of the video
					 */
					height: number;
			  }
			| {
					/** @enum {string} */
					type: 'Text';
					/** @description URL to icon */
					icon_url?: string;
					/** @description URL for title */
					url?: string;
					/** @description Title of text embed */
					title?: string;
					/** @description Description of text embed */
					description?: string;
					/** @description ID of uploaded autumn file */
					media?: components['schemas']['AutumnFile'];
					/** @description CSS Colour */
					colour?: string;
			  }
			| {
					/** @enum {string} */
					type: 'None';
			  };
		/** @description Information about special remote content */
		Special:
			| {
					/** @enum {string} */
					type: 'None';
			  }
			| {
					/** @enum {string} */
					type: 'GIF';
			  }
			| {
					/** @enum {string} */
					type: 'YouTube';
					id: string;
					timestamp?: string;
			  }
			| {
					/** @enum {string} */
					type: 'Lightspeed';
					content_type: components['schemas']['LightspeedType'];
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'Twitch';
					content_type: components['schemas']['TwitchType'];
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'Spotify';
					content_type: string;
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'Soundcloud';
			  }
			| {
					/** @enum {string} */
					type: 'Bandcamp';
					content_type: components['schemas']['BandcampType'];
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'Streamable';
					id: string;
			  };
		/**
		 * @description Type of remote Lightspeed.tv content
		 * @enum {string}
		 */
		LightspeedType: 'Channel';
		/**
		 * @description Type of remote Twitch content
		 * @enum {string}
		 */
		TwitchType: 'Channel' | 'Video' | 'Clip';
		/**
		 * @description Type of remote Bandcamp content
		 * @enum {string}
		 */
		BandcampType: 'Album' | 'Track';
		/** @description Image */
		Image: {
			/** @description URL to the original image */
			url: string;
			/**
			 * Format: int
			 * @description Width of the image
			 */
			width: number;
			/**
			 * Format: int
			 * @description Height of the image
			 */
			height: number;
			/** @description Positioning and size */
			size: components['schemas']['ImageSize'];
		};
		/**
		 * @description Image positioning and size
		 * @enum {string}
		 */
		ImageSize: 'Large' | 'Preview';
		/** @description Video */
		Video: {
			/** @description URL to the original video */
			url: string;
			/**
			 * Format: int
			 * @description Width of the video
			 */
			width: number;
			/**
			 * Format: int
			 * @description Height of the video
			 */
			height: number;
		};
		/** @description Information to guide interactions on this message */
		Interactions: {
			/** @description Reactions which should always appear and be distinct */
			reactions?: string[];
			/**
			 * @description Whether reactions should be restricted to the given list
			 *
			 * Can only be set to true if reactions list is of at least length 1
			 */
			restrict_reactions?: boolean;
		};
		/** @description Name and / or avatar override information */
		Masquerade: {
			/** @description Replace the display name shown on this message */
			name?: string;
			/** @description Replace the avatar shown on this message (URL to image file) */
			avatar?: string;
			/**
			 * @description Replace the display role colour shown on this message
			 *
			 * Must have `ManageRole` permission to use
			 */
			colour?: string;
		};
		DataMessageSend: {
			/**
			 * @description Unique token to prevent duplicate message sending
			 *
			 * **This is deprecated and replaced by `Idempotency-Key`!**
			 */
			nonce?: string;
			/** @description Message content to send */
			content?: string;
			/** @description Attachments to include in message */
			attachments?: string[];
			/** @description Messages to reply to */
			replies?: components['schemas']['Reply'][];
			/**
			 * @description Embeds to include in message
			 *
			 * Text embed content contributes to the content length cap
			 */
			embeds?: components['schemas']['SendableEmbed'][];
			/** @description Masquerade to apply to this message */
			masquerade?: components['schemas']['Masquerade'];
			/** @description Information about how this message should be interacted with */
			interactions?: components['schemas']['Interactions'];
		};
		/**
		 * Reply
		 * @description Representation of a message reply before it is sent.
		 */
		Reply: {
			/** @description Message Id */
			id: string;
			/** @description Whether this reply should mention the message's author */
			mention: boolean;
		};
		/** @description Representation of a text embed before it is sent. */
		SendableEmbed: {
			icon_url?: string;
			url?: string;
			title?: string;
			description?: string;
			media?: string;
			colour?: string;
		};
		/**
		 * Bulk Message Response
		 * @description Response used when multiple messages are fetched
		 */
		BulkMessageResponse:
			| components['schemas']['Message'][]
			| {
					/** @description List of messages */
					messages: components['schemas']['Message'][];
					/** @description List of users */
					users: components['schemas']['User'][];
					/** @description List of members */
					members?: components['schemas']['Member'][];
			  };
		/** @description Representation of a member of a server on Revolt */
		Member: {
			/** @description Unique member id */
			_id: components['schemas']['MemberCompositeKey'];
			/** @description Time at which this user joined the server */
			joined_at: components['schemas']['ISO8601 Timestamp'];
			/** @description Member's nickname */
			nickname?: string;
			/** @description Avatar attachment */
			avatar?: components['schemas']['AutumnFile'];
			/** @description Member's roles */
			roles?: string[];
			/** @description Timestamp this member is timed out until */
			timeout?: components['schemas']['ISO8601 Timestamp'];
		};
		/** @description Composite primary key consisting of server and user id */
		MemberCompositeKey: {
			/** @description Server Id */
			server: string;
			/** @description User Id */
			user: string;
		};
		/**
		 * Message Sort
		 * @description Sort used for retrieving messages
		 * @enum {string}
		 */
		MessageSort: 'Relevance' | 'Latest' | 'Oldest';
		/** Search Parameters */
		OptionsMessageSearch: {
			/**
			 * @description Full-text search query
			 *
			 * See [MongoDB documentation](https://docs.mongodb.com/manual/text-search/#-text-operator) for more information.
			 */
			query: string;
			/**
			 * Format: int64
			 * @description Maximum number of messages to fetch
			 */
			limit?: number;
			/** @description Message id before which messages should be fetched */
			before?: string;
			/** @description Message id after which messages should be fetched */
			after?: string;
			/**
			 * @description Message sort direction
			 *
			 * By default, it will be sorted by latest.
			 * @default Relevance
			 */
			sort?: components['schemas']['MessageSort'];
			/** @description Whether to include user (and member, if server channel) objects */
			include_users?: boolean;
		};
		/** Query Parameters */
		OptionsQueryStale: {
			/** @description Array of message IDs */
			ids: string[];
		};
		/** Message Details */
		DataEditMessage: {
			/** @description New message content */
			content?: string;
			/** @description Embeds to include in the message */
			embeds?: components['schemas']['SendableEmbed'][];
		};
		/** Search Parameters */
		OptionsBulkDelete: {
			/** @description Message IDs */
			ids: string[];
		};
		/** Group Data */
		DataCreateGroup: {
			/** @description Group name */
			name: string;
			/** @description Group description */
			description?: string;
			/**
			 * @description Array of user IDs to add to the group
			 *
			 * Must be friends with these users.
			 */
			users: string[];
			/** @description Whether this group is age-restricted */
			nsfw?: boolean;
		};
		/** Voice Server Token Response */
		CreateVoiceUserResponse: {
			/** @description Token for authenticating with the voice server */
			token: string;
		};
		/** Permission Value */
		Data: {
			/** @description Allow / deny values to set for this role */
			permissions: components['schemas']['Override'];
		};
		/** @description Representation of a single permission override */
		Override: {
			/**
			 * Format: uint64
			 * @description Allow bit flags
			 */
			allow: number;
			/**
			 * Format: uint64
			 * @description Disallow bit flags
			 */
			deny: number;
		};
		/** Permission Value */
		DataDefaultChannelPermissions:
			| {
					/**
					 * Format: uint64
					 * @description Permission values to set for members in a `Group`
					 */
					permissions: number;
			  }
			| {
					/** @description Allow / deny values to set for members in this `TextChannel` or `VoiceChannel` */
					permissions: components['schemas']['Override'];
			  };
		/** @description Webhook */
		Webhook: {
			/** @description Webhook Id */
			id: string;
			/** @description The name of the webhook */
			name: string;
			/** @description The avatar of the webhook */
			avatar?: components['schemas']['AutumnFile'];
			/** @description The channel this webhook belongs to */
			channel_id: string;
			/**
			 * Format: uint64
			 * @description The permissions for the webhook
			 */
			permissions: number;
			/** @description The private token for the webhook */
			token?: string;
		};
		CreateWebhookBody: {
			name: string;
			avatar?: string;
		};
		/** Create Server Response */
		CreateServerResponse: {
			/** @description Server object */
			server: components['schemas']['Server'];
			/** @description Default channels */
			channels: components['schemas']['Channel'][];
		};
		/** @description Representation of a server on Revolt */
		Server: {
			/** @description Unique Id */
			_id: string;
			/** @description User id of the owner */
			owner: string;
			/** @description Name of the server */
			name: string;
			/** @description Description for the server */
			description?: string;
			/** @description Channels within this server */
			channels: string[];
			/** @description Categories for this server */
			categories?: components['schemas']['Category'][];
			/** @description Configuration for sending system event messages */
			system_messages?: components['schemas']['SystemMessageChannels'];
			/** @description Roles for this server */
			roles?: {
				[key: string]: components['schemas']['Role'];
			};
			/**
			 * Format: int64
			 * @description Default set of server and channel permissions
			 */
			default_permissions: number;
			/** @description Icon attachment */
			icon?: components['schemas']['AutumnFile'];
			/** @description Banner attachment */
			banner?: components['schemas']['AutumnFile'];
			/**
			 * Format: int32
			 * @description Bitfield of server flags
			 */
			flags?: number;
			/** @description Whether this server is flagged as not safe for work */
			nsfw?: boolean;
			/** @description Whether to enable analytics */
			analytics?: boolean;
			/** @description Whether this server should be publicly discoverable */
			discoverable?: boolean;
		};
		/** @description Channel category */
		Category: {
			/** @description Unique ID for this category */
			id: string;
			/** @description Title for this category */
			title: string;
			/** @description Channels in this category */
			channels: string[];
		};
		/** @description System message channel assignments */
		SystemMessageChannels: {
			/** @description ID of channel to send user join messages in */
			user_joined?: string;
			/** @description ID of channel to send user left messages in */
			user_left?: string;
			/** @description ID of channel to send user kicked messages in */
			user_kicked?: string;
			/** @description ID of channel to send user banned messages in */
			user_banned?: string;
		};
		/** @description Representation of a server role */
		Role: {
			/** @description Role name */
			name: string;
			/** @description Permissions available to this role */
			permissions: components['schemas']['OverrideField'];
			/**
			 * @description Colour used for this role
			 *
			 * This can be any valid CSS colour
			 */
			colour?: string;
			/** @description Whether this role should be shown separately on the member sidebar */
			hoist?: boolean;
			/**
			 * Format: int64
			 * @description Ranking of this role
			 * @default 0
			 */
			rank?: number;
		};
		/** Server Data */
		DataCreateServer: {
			/** @description Server name */
			name: string;
			/** @description Server description */
			description?: string;
			/** @description Whether this server is age-restricted */
			nsfw?: boolean;
		};
		/** Fetch server route response */
		FetchServerResponse:
			| components['schemas']['Server']
			| {
					/** @description Channels within this server */
					channels: string[];
					/** @description Unique Id */
					_id: string;
					/** @description User id of the owner */
					owner: string;
					/** @description Name of the server */
					name: string;
					/** @description Description for the server */
					description?: string;
					/** @description Categories for this server */
					categories?: components['schemas']['Category'][];
					/** @description Configuration for sending system event messages */
					system_messages?: components['schemas']['SystemMessageChannels'];
					/** @description Roles for this server */
					roles?: {
						[key: string]: components['schemas']['Role'];
					};
					/**
					 * Format: int64
					 * @description Default set of server and channel permissions
					 */
					default_permissions: number;
					/** @description Icon attachment */
					icon?: components['schemas']['AutumnFile'];
					/** @description Banner attachment */
					banner?: components['schemas']['AutumnFile'];
					/**
					 * Format: int32
					 * @description Bitfield of server flags
					 */
					flags?: number;
					/** @description Whether this server is flagged as not safe for work */
					nsfw?: boolean;
					/** @description Whether to enable analytics */
					analytics?: boolean;
					/** @description Whether this server should be publicly discoverable */
					discoverable?: boolean;
			  };
		/** Server Data */
		DataEditServer: {
			/** @description Server name */
			name?: string;
			/** @description Server description */
			description?: string;
			/** @description Attachment Id for icon */
			icon?: string;
			/** @description Attachment Id for banner */
			banner?: string;
			/** @description Category structure for server */
			categories?: components['schemas']['Category'][];
			/** @description System message configuration */
			system_messages?: components['schemas']['SystemMessageChannels'];
			/**
			 * Format: int32
			 * @description Bitfield of server flags
			 */
			flags?: number;
			/** @description Whether this server is public and should show up on [Revolt Discover](https://rvlt.gg) */
			discoverable?: boolean;
			/**
			 * @description Whether analytics should be collected for this server
			 *
			 * Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg).
			 */
			analytics?: boolean;
			/** @description Fields to remove from server object */
			remove?: components['schemas']['FieldsServer'][];
		};
		/**
		 * @description Optional fields on server object
		 * @enum {string}
		 */
		FieldsServer: 'Description' | 'Categories' | 'SystemMessages' | 'Icon' | 'Banner';
		/** Channel Data */
		DataCreateChannel: {
			/**
			 * @description Channel type
			 * @default Text
			 */
			type?: components['schemas']['ChannelType'];
			/** @description Channel name */
			name: string;
			/** @description Channel description */
			description?: string;
			/** @description Whether this channel is age restricted */
			nsfw?: boolean;
		};
		/**
		 * Channel Type
		 * @enum {string}
		 */
		ChannelType: 'Text' | 'Voice';
		/**
		 * Member List
		 * @description Both lists are sorted by ID.
		 */
		AllMemberResponse: {
			/** @description List of members */
			members: components['schemas']['Member'][];
			/** @description List of users */
			users: components['schemas']['User'][];
		};
		/** Member Data */
		DataMemberEdit: {
			/** @description Member nickname */
			nickname?: string;
			/** @description Attachment Id to set for avatar */
			avatar?: string;
			/** @description Array of role ids */
			roles?: string[];
			/** @description Timestamp this member is timed out until */
			timeout?: components['schemas']['ISO8601 Timestamp'];
			/** @description Fields to remove from channel object */
			remove?: components['schemas']['FieldsMember'][];
		};
		/**
		 * @description Optional fields on server member object
		 * @enum {string}
		 */
		FieldsMember: 'Nickname' | 'Avatar' | 'Roles' | 'Timeout';
		/** Query members by name */
		MemberQueryResponse: {
			/** @description List of members */
			members: components['schemas']['Member'][];
			/** @description List of users */
			users: components['schemas']['User'][];
		};
		/** @description Representation of a server ban on Revolt */
		ServerBan: {
			/** @description Unique member id */
			_id: components['schemas']['MemberCompositeKey'];
			/** @description Reason for ban creation */
			reason?: string;
		};
		/** Ban Information */
		DataBanCreate: {
			/** @description Ban reason */
			reason?: string;
		};
		/** Ban List Result */
		BanListResult: {
			/** @description Users objects */
			users: components['schemas']['BannedUser'][];
			/** @description Ban objects */
			bans: components['schemas']['ServerBan'][];
		};
		/**
		 * Banned User
		 * @description Just enoguh user information to list bans.
		 */
		BannedUser: {
			/** @description Id of the banned user */
			_id: string;
			/** @description Username of the banned user */
			username: string;
			/** @description Discriminator of the banned user */
			discriminator: string;
			/** @description Avatar of the banned user */
			avatar?: components['schemas']['AutumnFile'];
		};
		/** New Role Response */
		NewRoleResponse: {
			/** @description Id of the role */
			id: string;
			/** @description New role */
			role: components['schemas']['Role'];
		};
		/** Role Data */
		DataCreateRole: {
			/** @description Role name */
			name: string;
			/**
			 * Format: int64
			 * @description Ranking position
			 *
			 * Smaller values take priority.
			 */
			rank?: number;
		};
		/** Role Data */
		DataEditRole: {
			/** @description Role name */
			name?: string;
			/** @description Role colour */
			colour?: string;
			/** @description Whether this role should be displayed separately */
			hoist?: boolean;
			/**
			 * Format: int64
			 * @description Ranking position
			 *
			 * Smaller values take priority.
			 */
			rank?: number;
			/** @description Fields to remove from role object */
			remove?: components['schemas']['FieldsRole'][];
		};
		/**
		 * @description Optional fields on server object
		 * @enum {string}
		 */
		FieldsRole: 'Colour';
		/** Permission Value */
		DataSetServerRolePermission: {
			/** @description Allow / deny values for the role in this server. */
			permissions: components['schemas']['Override'];
		};
		/** @description Data permissions Value - contains allow */
		DataPermissionsValue: {
			/** Format: uint64 */
			permissions: number;
		};
		/** @description Representation of an Emoji on Revolt */
		Emoji: {
			/** @description Unique Id */
			_id: string;
			/** @description What owns this emoji */
			parent: components['schemas']['EmojiParent'];
			/** @description Uploader user id */
			creator_id: string;
			/** @description Emoji name */
			name: string;
			/** @description Whether the emoji is animated */
			animated?: boolean;
			/** @description Whether the emoji is marked as nsfw */
			nsfw?: boolean;
		};
		/** @description Information about what owns this emoji */
		EmojiParent:
			| {
					/** @enum {string} */
					type: 'Server';
					id: string;
			  }
			| {
					/** @enum {string} */
					type: 'Detached';
			  };

		/** Invite */
		InviteResponse:
			| {
					/** @enum {string} */
					type: 'Server';
					/** @description Invite code */
					code: string;
					/** @description Id of the server */
					server_id: string;
					/** @description Name of the server */
					server_name: string;
					/** @description Attachment for server icon */
					server_icon?: components['schemas']['AutumnFile'];
					/** @description Attachment for server banner */
					server_banner?: components['schemas']['AutumnFile'];
					/**
					 * Format: int32
					 * @description Enum of server flags
					 */
					server_flags?: number;
					/** @description Id of server channel */
					channel_id: string;
					/** @description Name of server channel */
					channel_name: string;
					/** @description Description of server channel */
					channel_description?: string;
					/** @description Name of user who created the invite */
					user_name: string;
					/** @description Avatar of the user who created the invite */
					user_avatar?: components['schemas']['AutumnFile'];
					/**
					 * Format: int64
					 * @description Number of members in this server
					 */
					member_count: number;
			  }
			| {
					/** @enum {string} */
					type: 'Group';
					/** @description Invite code */
					code: string;
					/** @description Id of group channel */
					channel_id: string;
					/** @description Name of group channel */
					channel_name: string;
					/** @description Description of group channel */
					channel_description?: string;
					/** @description Name of user who created the invite */
					user_name: string;
					/** @description Avatar of the user who created the invite */
					user_avatar?: components['schemas']['AutumnFile'];
			  };

		/** Join Response */
		InviteJoinResponse: {
			/** @enum {string} */
			type: 'Server';
			/** @description Channels in the server */
			channels: components['schemas']['Channel'][];
			/** @description Server we are joining */
			server: components['schemas']['Server'];
		};
		/** Emoji Data */
		DataCreateEmoji: {
			/** @description Server name */
			name: string;
			/** @description Parent information */
			parent: components['schemas']['EmojiParent'];
			/**
			 * @description Whether the emoji is mature
			 * @default false
			 */
			nsfw?: boolean;
		};
		/** Report Data */
		DataReportContent: {
			/** @description Content being reported */
			content: components['schemas']['ReportedContent'];
			/**
			 * @description Additional report description
			 * @default
			 */
			additional_context?: string;
		};
		/** @description The content being reported */
		ReportedContent:
			| {
					/** @enum {string} */
					type: 'Message';
					/** @description ID of the message */
					id: string;
					/** @description Reason for reporting message */
					report_reason: components['schemas']['ContentReportReason'];
			  }
			| {
					/** @enum {string} */
					type: 'Server';
					/** @description ID of the server */
					id: string;
					/** @description Reason for reporting server */
					report_reason: components['schemas']['ContentReportReason'];
			  }
			| {
					/** @enum {string} */
					type: 'User';
					/** @description ID of the user */
					id: string;
					/** @description Reason for reporting a user */
					report_reason: components['schemas']['UserReportReason'];
					/** @description Message context */
					message_id?: string;
			  };

		/**
		 * @description Reason for reporting content (message or server)
		 * @enum {string}
		 */
		ContentReportReason:
			| 'NoneSpecified'
			| 'Illegal'
			| 'IllegalGoods'
			| 'IllegalExtortion'
			| 'IllegalPornography'
			| 'IllegalHacking'
			| 'ExtremeViolence'
			| 'PromotesHarm'
			| 'UnsolicitedSpam'
			| 'Raid'
			| 'SpamAbuse'
			| 'ScamsFraud'
			| 'Malware'
			| 'Harassment';
		/**
		 * @description Reason for reporting a user
		 * @enum {string}
		 */
		UserReportReason:
			| 'NoneSpecified'
			| 'UnsolicitedSpam'
			| 'SpamAbuse'
			| 'InappropriateProfile'
			| 'Impersonation'
			| 'BanEvasion'
			| 'Underage';
		/** Error */
		'Authifier Error':
			| {
					/** @enum {string} */
					type: 'IncorrectData';
					with: string;
			  }
			| {
					/** @enum {string} */
					type: 'DatabaseError';
					operation: string;
					with: string;
			  }
			| {
					/** @enum {string} */
					type: 'InternalError';
			  }
			| {
					/** @enum {string} */
					type: 'OperationFailed';
			  }
			| {
					/** @enum {string} */
					type: 'RenderFail';
			  }
			| {
					/** @enum {string} */
					type: 'MissingHeaders';
			  }
			| {
					/** @enum {string} */
					type: 'CaptchaFailed';
			  }
			| {
					/** @enum {string} */
					type: 'BlockedByShield';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidSession';
			  }
			| {
					/** @enum {string} */
					type: 'UnverifiedAccount';
			  }
			| {
					/** @enum {string} */
					type: 'UnknownUser';
			  }
			| {
					/** @enum {string} */
					type: 'EmailFailed';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidToken';
			  }
			| {
					/** @enum {string} */
					type: 'MissingInvite';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidInvite';
			  }
			| {
					/** @enum {string} */
					type: 'InvalidCredentials';
			  }
			| {
					/** @enum {string} */
					type: 'CompromisedPassword';
			  }
			| {
					/** @enum {string} */
					type: 'ShortPassword';
			  }
			| {
					/** @enum {string} */
					type: 'Blacklisted';
			  }
			| {
					/** @enum {string} */
					type: 'LockedOut';
			  }
			| {
					/** @enum {string} */
					type: 'TotpAlreadyEnabled';
			  }
			| {
					/** @enum {string} */
					type: 'DisallowedMFAMethod';
			  };
		/** Account Data */
		DataCreateAccount: {
			/** @description Valid email address */
			email: string;
			/** @description Password */
			password: string;
			/** @description Invite code */
			invite?: string;
			/** @description Captcha verification code */
			captcha?: string;
		};
		/** Resend Information */
		DataResendVerification: {
			/** @description Email associated with the account */
			email: string;
			/** @description Captcha verification code */
			captcha?: string;
		};
		/** Account Deletion Token */
		DataAccountDeletion: {
			/** @description Deletion token */
			token: string;
		};
		AccountInfo: {
			_id: string;
			email: string;
		};
		/** Change Data */
		DataChangePassword: {
			/** @description New password */
			password: string;
			/** @description Current password */
			current_password: string;
		};
		/** Change Data */
		DataChangeEmail: {
			/** @description Valid email address */
			email: string;
			/** @description Current password */
			current_password: string;
		};
		ResponseVerify: null | {
			/** @description Authorised MFA ticket, can be used to log in */
			ticket: components['schemas']['MFATicket'];
		};
		/** @description Multi-factor auth ticket */
		MFATicket: {
			/** @description Unique Id */
			_id: string;
			/** @description Account Id */
			account_id: string;
			/** @description Unique Token */
			token: string;
			/** @description Whether this ticket has been validated (can be used for account actions) */
			validated: boolean;
			/** @description Whether this ticket is authorised (can be used to log a user in) */
			authorised: boolean;
			/** @description TOTP code at time of ticket creation */
			last_totp_code?: string;
		};
		/** Password Reset */
		DataPasswordReset: {
			/** @description Reset token */
			token: string;
			/** @description New password */
			password: string;
			/**
			 * @description Whether to logout all sessions
			 * @default false
			 */
			remove_sessions?: boolean;
		};
		/** Reset Information */
		DataSendPasswordReset: {
			/** @description Email associated with the account */
			email: string;
			/** @description Captcha verification code */
			captcha?: string;
		};
		ResponseLogin:
			| {
					/** @enum {string} */
					result: 'Success';
					/** @description Unique Id */
					_id: string;
					/** @description User Id */
					user_id: string;
					/** @description Session token */
					token: string;
					/** @description Display name */
					name: string;
					/** @description Web Push subscription */
					subscription?: components['schemas']['WebPushSubscription'];
			  }
			| {
					/** @enum {string} */
					result: 'MFA';
					ticket: string;
					allowed_methods: components['schemas']['MFAMethod'][];
			  }
			| {
					/** @enum {string} */
					result: 'Disabled';
					user_id: string;
			  };

		/** @description Web Push subscription */
		WebPushSubscription: {
			endpoint: string;
			p256dh: string;
			auth: string;
		};
		/**
		 * @description MFA method
		 * @enum {string}
		 */
		MFAMethod: 'Password' | 'Recovery' | 'Totp';
		/** Login Data */
		DataLogin:
			| {
					/** @description Email */
					email: string;
					/** @description Password */
					password: string;
					/** @description Friendly name used for the session */
					friendly_name?: string;
			  }
			| {
					/**
					 * @description Unvalidated or authorised MFA ticket
					 *
					 * Used to resolve the correct account
					 */
					mfa_ticket: string;
					/**
					 * @description Valid MFA response
					 *
					 * This will take precedence over the `password` field where applicable
					 */
					mfa_response?: components['schemas']['MFAResponse'];
					/** @description Friendly name used for the session */
					friendly_name?: string;
			  };
		/** @description MFA response */
		MFAResponse:
			| {
					password: string;
			  }
			| {
					recovery_code: string;
			  }
			| {
					totp_code: string;
			  };
		SessionInfo: {
			_id: string;
			name: string;
		};
		/** Edit Data */
		DataEditSession: {
			/** @description Session friendly name */
			friendly_name: string;
		};
		MultiFactorStatus: {
			email_otp: boolean;
			trusted_handover: boolean;
			email_mfa: boolean;
			totp_mfa: boolean;
			security_key_mfa: boolean;
			recovery_active: boolean;
		};
		/** Totp Secret */
		ResponseTotpSecret: {
			secret: string;
		};
		/** Onboarding Status */
		DataHello: {
			/** @description Whether onboarding is required */
			onboarding: boolean;
		};
		/** New User Data */
		DataOnboard: {
			/** @description New username which will be used to identify the user on the platform */
			username: string;
		};
		/** Fetch Options */
		OptionsFetchSettings: {
			/** @description Keys to fetch */
			keys: string[];
		};
		/** @description Representation of the state of a channel from the perspective of a user */
		ChannelUnread: {
			/** @description Composite key pointing to a user's view of a channel */
			_id: components['schemas']['ChannelCompositeKey'];
			/** @description Id of the last message read in this channel by a user */
			last_id?: string;
			/** @description Array of message ids that mention the user */
			mentions?: string[];
		};
		/** @description Composite primary key consisting of channel and user id */
		ChannelCompositeKey: {
			/** @description Channel Id */
			channel: string;
			/** @description User Id */
			user: string;
		};
		/** @description New webhook information */
		DataEditWebhook: {
			/** @description Webhook name */
			name?: string;
			/** @description Avatar ID */
			avatar?: string;
			/**
			 * Format: uint64
			 * @description Webhook permissions
			 */
			permissions?: number;
			/**
			 * @description Fields to remove from webhook
			 * @default []
			 */
			remove?: components['schemas']['FieldsWebhook'][];
		};
		/**
		 * @description Optional fields on webhook object
		 * @enum {string}
		 */
		FieldsWebhook: 'Avatar';
		/** @description Webhook information */
		ResponseWebhook: {
			/** @description Webhook Id */
			id: string;
			/** @description Webhook name */
			name: string;
			/** @description Avatar ID */
			avatar?: string;
			/** @description The channel this webhook belongs to */
			channel_id: string;
			/**
			 * Format: uint64
			 * @description The permissions for the webhook
			 */
			permissions: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

type $defs = Record<string, never>;

type external = Record<string, never>;

type operations = Record<string, never>;
